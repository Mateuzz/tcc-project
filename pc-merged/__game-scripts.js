function FxaaEffect(e){pc.PostEffect.call(this,e);var o=["uniform sampler2D uColorBuffer;","uniform vec2 uResolution;","","#define FXAA_REDUCE_MIN   (1.0/128.0)","#define FXAA_REDUCE_MUL   (1.0/8.0)","#define FXAA_SPAN_MAX     8.0","","void main()","{","    vec3 rgbNW = texture2D( uColorBuffer, ( gl_FragCoord.xy + vec2( -1.0, -1.0 ) ) * uResolution ).xyz;","    vec3 rgbNE = texture2D( uColorBuffer, ( gl_FragCoord.xy + vec2( 1.0, -1.0 ) ) * uResolution ).xyz;","    vec3 rgbSW = texture2D( uColorBuffer, ( gl_FragCoord.xy + vec2( -1.0, 1.0 ) ) * uResolution ).xyz;","    vec3 rgbSE = texture2D( uColorBuffer, ( gl_FragCoord.xy + vec2( 1.0, 1.0 ) ) * uResolution ).xyz;","    vec4 rgbaM  = texture2D( uColorBuffer,  gl_FragCoord.xy  * uResolution );","    vec3 rgbM  = rgbaM.xyz;","    float opacity  = rgbaM.w;","","    vec3 luma = vec3( 0.299, 0.587, 0.114 );","","    float lumaNW = dot( rgbNW, luma );","    float lumaNE = dot( rgbNE, luma );","    float lumaSW = dot( rgbSW, luma );","    float lumaSE = dot( rgbSE, luma );","    float lumaM  = dot( rgbM,  luma );","    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );","    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );","","    vec2 dir;","    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));","    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));","","    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );","","    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );","    dir = min( vec2( FXAA_SPAN_MAX, FXAA_SPAN_MAX), max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX), dir * rcpDirMin)) * uResolution;","","    vec3 rgbA = 0.5 * (","        texture2D( uColorBuffer, gl_FragCoord.xy  * uResolution + dir * ( 1.0 / 3.0 - 0.5 ) ).xyz +","        texture2D( uColorBuffer, gl_FragCoord.xy  * uResolution + dir * ( 2.0 / 3.0 - 0.5 ) ).xyz );","","    vec3 rgbB = rgbA * 0.5 + 0.25 * (","        texture2D( uColorBuffer, gl_FragCoord.xy  * uResolution + dir * -0.5 ).xyz +","        texture2D( uColorBuffer, gl_FragCoord.xy  * uResolution + dir * 0.5 ).xyz );","","    float lumaB = dot( rgbB, luma );","","    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) )","    {","        gl_FragColor = vec4( rgbA, opacity );","    }","    else","    {","        gl_FragColor = vec4( rgbB, opacity );","    }","}"].join("\n");this.fxaaShader=pc.createShaderFromCode(e,pc.PostEffect.quadVertexShader,o,"FxaaShader",{aPosition:pc.SEMANTIC_POSITION}),this.resolution=new Float32Array(2)}FxaaEffect.prototype=Object.create(pc.PostEffect.prototype),FxaaEffect.prototype.constructor=FxaaEffect,Object.assign(FxaaEffect.prototype,{render:function(e,o,a){var r=this.device.scope;this.resolution[0]=1/e.width,this.resolution[1]=1/e.height,r.resolve("uResolution").setValue(this.resolution),r.resolve("uColorBuffer").setValue(e.colorBuffer),this.drawQuad(o,this.fxaaShader,a)}});var Fxaa=pc.createScript("fxaa");Fxaa.prototype.initialize=function(){this.effect=new FxaaEffect(this.app.graphicsDevice);var e=this.entity.camera.postEffects;e.addEffect(this.effect),this.on("state",(function(o){o?e.addEffect(this.effect):e.removeEffect(this.effect)})),this.on("destroy",(function(){e.removeEffect(this.effect)}))};var OrbitCamera=pc.createScript("orbitCamera");OrbitCamera.attributes.add("distanceMax",{type:"number",default:0,title:"Distance Max",description:"Setting this at 0 will give an infinite distance limit"}),OrbitCamera.attributes.add("distanceMin",{type:"number",default:0,title:"Distance Min"}),OrbitCamera.attributes.add("pitchAngleMax",{type:"number",default:90,title:"Pitch Angle Max (degrees)"}),OrbitCamera.attributes.add("pitchAngleMin",{type:"number",default:-90,title:"Pitch Angle Min (degrees)"}),OrbitCamera.attributes.add("inertiaFactor",{type:"number",default:0,title:"Inertia Factor",description:"Higher value means that the camera will continue moving after the user has stopped dragging. 0 is fully responsive."}),OrbitCamera.attributes.add("focusEntity",{type:"entity",title:"Focus Entity",description:"Entity for the camera to focus on. If blank, then the camera will use the whole scene"}),OrbitCamera.attributes.add("frameOnStart",{type:"boolean",default:!0,title:"Frame on Start",description:'Frames the entity or scene at the start of the application."'}),Object.defineProperty(OrbitCamera.prototype,"distance",{get:function(){return this._targetDistance},set:function(t){this._targetDistance=this._clampDistance(t)}}),Object.defineProperty(OrbitCamera.prototype,"pitch",{get:function(){return this._targetPitch},set:function(t){this._targetPitch=this._clampPitchAngle(t)}}),Object.defineProperty(OrbitCamera.prototype,"yaw",{get:function(){return this._targetYaw},set:function(t){this._targetYaw=t;var i=(this._targetYaw-this._yaw)%360;this._targetYaw=i>180?this._yaw-(360-i):i<-180?this._yaw+(360+i):this._yaw+i}}),Object.defineProperty(OrbitCamera.prototype,"pivotPoint",{get:function(){return this._pivotPoint},set:function(t){this._pivotPoint.copy(t)}}),OrbitCamera.prototype.focus=function(t){this._buildAabb(t);var i=this._modelsAabb.halfExtents,e=Math.max(i.x,Math.max(i.y,i.z));this.distance=1.5*e/Math.sin(.5*this.entity.camera.fov*pc.math.DEG_TO_RAD),this._removeInertia(),this._pivotPoint.copy(this._modelsAabb.center)},OrbitCamera.distanceBetween=new pc.Vec3,OrbitCamera.prototype.resetAndLookAtPoint=function(t,i){this.pivotPoint.copy(i),this.entity.setPosition(t),this.entity.lookAt(i);var e=OrbitCamera.distanceBetween;e.sub2(i,t),this.distance=e.length(),this.pivotPoint.copy(i);var a=this.entity.getRotation();this.yaw=this._calcYaw(a),this.pitch=this._calcPitch(a,this.yaw),this._removeInertia(),this._updatePosition()},OrbitCamera.prototype.resetAndLookAtEntity=function(t,i){this._buildAabb(i),this.resetAndLookAtPoint(t,this._modelsAabb.center)},OrbitCamera.prototype.reset=function(t,i,e){this.pitch=i,this.yaw=t,this.distance=e,this._removeInertia()},OrbitCamera.prototype.initialize=function(){var t=this,onWindowResize=function(){t._checkAspectRatio()};window.addEventListener("resize",onWindowResize,!1),this._checkAspectRatio(),this._modelsAabb=new pc.BoundingBox,this._buildAabb(this.focusEntity||this.app.root),this.entity.lookAt(this._modelsAabb.center),this._pivotPoint=new pc.Vec3,this._pivotPoint.copy(this._modelsAabb.center);var i=this.entity.getRotation();if(this._yaw=this._calcYaw(i),this._pitch=this._clampPitchAngle(this._calcPitch(i,this._yaw)),this.entity.setLocalEulerAngles(this._pitch,this._yaw,0),this._distance=0,this._targetYaw=this._yaw,this._targetPitch=this._pitch,this.frameOnStart)this.focus(this.focusEntity||this.app.root);else{var e=new pc.Vec3;e.sub2(this.entity.getPosition(),this._pivotPoint),this._distance=this._clampDistance(e.length())}this._targetDistance=this._distance,this.on("attr:distanceMin",(function(t,i){this._distance=this._clampDistance(this._distance)})),this.on("attr:distanceMax",(function(t,i){this._distance=this._clampDistance(this._distance)})),this.on("attr:pitchAngleMin",(function(t,i){this._pitch=this._clampPitchAngle(this._pitch)})),this.on("attr:pitchAngleMax",(function(t,i){this._pitch=this._clampPitchAngle(this._pitch)})),this.on("attr:focusEntity",(function(t,i){this.frameOnStart?this.focus(t||this.app.root):this.resetAndLookAtEntity(this.entity.getPosition(),t||this.app.root)})),this.on("attr:frameOnStart",(function(t,i){t&&this.focus(this.focusEntity||this.app.root)})),this.on("destroy",(function(){window.removeEventListener("resize",onWindowResize,!1)}))},OrbitCamera.prototype.update=function(t){var i=0===this.inertiaFactor?1:Math.min(t/this.inertiaFactor,1);this._distance=pc.math.lerp(this._distance,this._targetDistance,i),this._yaw=pc.math.lerp(this._yaw,this._targetYaw,i),this._pitch=pc.math.lerp(this._pitch,this._targetPitch,i),this._updatePosition()},OrbitCamera.prototype._updatePosition=function(){this.entity.setLocalPosition(0,0,0),this.entity.setLocalEulerAngles(this._pitch,this._yaw,0);var t=this.entity.getPosition();t.copy(this.entity.forward),t.mulScalar(-this._distance),t.add(this.pivotPoint),this.entity.setPosition(t)},OrbitCamera.prototype._removeInertia=function(){this._yaw=this._targetYaw,this._pitch=this._targetPitch,this._distance=this._targetDistance},OrbitCamera.prototype._checkAspectRatio=function(){var t=this.app.graphicsDevice.height,i=this.app.graphicsDevice.width;this.entity.camera.horizontalFov=t>i},OrbitCamera.prototype._buildAabb=function(t){var i,e,a=[],n=t.findComponents("render");for(i=0;i<n.length;i++){var o=n[i];for(e=0;e<o.meshInstances.length;e++)a.push(o.meshInstances[e])}var s=t.findComponents("model");for(i=0;i<s.length;i++){var r=s[i];for(e=0;e<r.meshInstances.length;e++)a.push(r.meshInstances[e])}for(i=0;i<a.length;i++)0===i?this._modelsAabb.copy(a[i].aabb):this._modelsAabb.add(a[i].aabb)},OrbitCamera.prototype._calcYaw=function(t){var i=new pc.Vec3;return t.transformVector(pc.Vec3.FORWARD,i),Math.atan2(-i.x,-i.z)*pc.math.RAD_TO_DEG},OrbitCamera.prototype._clampDistance=function(t){return this.distanceMax>0?pc.math.clamp(t,this.distanceMin,this.distanceMax):Math.max(t,this.distanceMin)},OrbitCamera.prototype._clampPitchAngle=function(t){return pc.math.clamp(t,-this.pitchAngleMax,-this.pitchAngleMin)},OrbitCamera.quatWithoutYaw=new pc.Quat,OrbitCamera.yawOffset=new pc.Quat,OrbitCamera.prototype._calcPitch=function(t,i){var e=OrbitCamera.quatWithoutYaw,a=OrbitCamera.yawOffset;a.setFromEulerAngles(0,-i,0),e.mul2(a,t);var n=new pc.Vec3;return e.transformVector(pc.Vec3.FORWARD,n),Math.atan2(n.y,-n.z)*pc.math.RAD_TO_DEG};var OrbitCameraInputMouse=pc.createScript("orbitCameraInputMouse");OrbitCameraInputMouse.attributes.add("orbitSensitivity",{type:"number",default:.3,title:"Orbit Sensitivity",description:"How fast the camera moves around the orbit. Higher is faster"}),OrbitCameraInputMouse.attributes.add("distanceSensitivity",{type:"number",default:.15,title:"Distance Sensitivity",description:"How fast the camera moves in and out. Higher is faster"}),OrbitCameraInputMouse.prototype.initialize=function(){if(this.orbitCamera=this.entity.script.orbitCamera,this.orbitCamera){var t=this,onMouseOut=function(i){t.onMouseOut(i)};this.app.mouse.on(pc.EVENT_MOUSEDOWN,this.onMouseDown,this),this.app.mouse.on(pc.EVENT_MOUSEUP,this.onMouseUp,this),this.app.mouse.on(pc.EVENT_MOUSEMOVE,this.onMouseMove,this),this.app.mouse.on(pc.EVENT_MOUSEWHEEL,this.onMouseWheel,this),window.addEventListener("mouseout",onMouseOut,!1),this.on("destroy",(function(){this.app.mouse.off(pc.EVENT_MOUSEDOWN,this.onMouseDown,this),this.app.mouse.off(pc.EVENT_MOUSEUP,this.onMouseUp,this),this.app.mouse.off(pc.EVENT_MOUSEMOVE,this.onMouseMove,this),this.app.mouse.off(pc.EVENT_MOUSEWHEEL,this.onMouseWheel,this),window.removeEventListener("mouseout",onMouseOut,!1)}))}this.app.mouse.disableContextMenu(),this.lookButtonDown=!1,this.panButtonDown=!1,this.lastPoint=new pc.Vec2},OrbitCameraInputMouse.fromWorldPoint=new pc.Vec3,OrbitCameraInputMouse.toWorldPoint=new pc.Vec3,OrbitCameraInputMouse.worldDiff=new pc.Vec3,OrbitCameraInputMouse.prototype.pan=function(t){var i=OrbitCameraInputMouse.fromWorldPoint,e=OrbitCameraInputMouse.toWorldPoint,a=OrbitCameraInputMouse.worldDiff,n=this.entity.camera,o=this.orbitCamera.distance;n.screenToWorld(t.x,t.y,o,i),n.screenToWorld(this.lastPoint.x,this.lastPoint.y,o,e),a.sub2(e,i),this.orbitCamera.pivotPoint.add(a)},OrbitCameraInputMouse.prototype.onMouseDown=function(t){switch(t.button){case pc.MOUSEBUTTON_LEFT:this.lookButtonDown=!0;break;case pc.MOUSEBUTTON_MIDDLE:case pc.MOUSEBUTTON_RIGHT:this.panButtonDown=!0}},OrbitCameraInputMouse.prototype.onMouseUp=function(t){switch(t.button){case pc.MOUSEBUTTON_LEFT:this.lookButtonDown=!1;break;case pc.MOUSEBUTTON_MIDDLE:case pc.MOUSEBUTTON_RIGHT:this.panButtonDown=!1}},OrbitCameraInputMouse.prototype.onMouseMove=function(t){this.lookButtonDown?(this.orbitCamera.pitch-=t.dy*this.orbitSensitivity,this.orbitCamera.yaw-=t.dx*this.orbitSensitivity):this.panButtonDown&&this.pan(t),this.lastPoint.set(t.x,t.y)},OrbitCameraInputMouse.prototype.onMouseWheel=function(t){this.orbitCamera.distance-=t.wheel*this.distanceSensitivity*(.1*this.orbitCamera.distance),t.event.preventDefault()},OrbitCameraInputMouse.prototype.onMouseOut=function(t){this.lookButtonDown=!1,this.panButtonDown=!1};var OrbitCameraInputTouch=pc.createScript("orbitCameraInputTouch");OrbitCameraInputTouch.attributes.add("orbitSensitivity",{type:"number",default:.4,title:"Orbit Sensitivity",description:"How fast the camera moves around the orbit. Higher is faster"}),OrbitCameraInputTouch.attributes.add("distanceSensitivity",{type:"number",default:.2,title:"Distance Sensitivity",description:"How fast the camera moves in and out. Higher is faster"}),OrbitCameraInputTouch.prototype.initialize=function(){this.orbitCamera=this.entity.script.orbitCamera,this.lastTouchPoint=new pc.Vec2,this.lastPinchMidPoint=new pc.Vec2,this.lastPinchDistance=0,this.orbitCamera&&this.app.touch&&(this.app.touch.on(pc.EVENT_TOUCHSTART,this.onTouchStartEndCancel,this),this.app.touch.on(pc.EVENT_TOUCHEND,this.onTouchStartEndCancel,this),this.app.touch.on(pc.EVENT_TOUCHCANCEL,this.onTouchStartEndCancel,this),this.app.touch.on(pc.EVENT_TOUCHMOVE,this.onTouchMove,this),this.on("destroy",(function(){this.app.touch.off(pc.EVENT_TOUCHSTART,this.onTouchStartEndCancel,this),this.app.touch.off(pc.EVENT_TOUCHEND,this.onTouchStartEndCancel,this),this.app.touch.off(pc.EVENT_TOUCHCANCEL,this.onTouchStartEndCancel,this),this.app.touch.off(pc.EVENT_TOUCHMOVE,this.onTouchMove,this)})))},OrbitCameraInputTouch.prototype.getPinchDistance=function(t,i){var e=t.x-i.x,a=t.y-i.y;return Math.sqrt(e*e+a*a)},OrbitCameraInputTouch.prototype.calcMidPoint=function(t,i,e){e.set(i.x-t.x,i.y-t.y),e.mulScalar(.5),e.x+=t.x,e.y+=t.y},OrbitCameraInputTouch.prototype.onTouchStartEndCancel=function(t){var i=t.touches;1===i.length?this.lastTouchPoint.set(i[0].x,i[0].y):2===i.length&&(this.lastPinchDistance=this.getPinchDistance(i[0],i[1]),this.calcMidPoint(i[0],i[1],this.lastPinchMidPoint))},OrbitCameraInputTouch.fromWorldPoint=new pc.Vec3,OrbitCameraInputTouch.toWorldPoint=new pc.Vec3,OrbitCameraInputTouch.worldDiff=new pc.Vec3,OrbitCameraInputTouch.prototype.pan=function(t){var i=OrbitCameraInputTouch.fromWorldPoint,e=OrbitCameraInputTouch.toWorldPoint,a=OrbitCameraInputTouch.worldDiff,n=this.entity.camera,o=this.orbitCamera.distance;n.screenToWorld(t.x,t.y,o,i),n.screenToWorld(this.lastPinchMidPoint.x,this.lastPinchMidPoint.y,o,e),a.sub2(e,i),this.orbitCamera.pivotPoint.add(a)},OrbitCameraInputTouch.pinchMidPoint=new pc.Vec2,OrbitCameraInputTouch.prototype.onTouchMove=function(t){var i=OrbitCameraInputTouch.pinchMidPoint,e=t.touches;if(1===e.length){var a=e[0];this.orbitCamera.pitch-=(a.y-this.lastTouchPoint.y)*this.orbitSensitivity,this.orbitCamera.yaw-=(a.x-this.lastTouchPoint.x)*this.orbitSensitivity,this.lastTouchPoint.set(a.x,a.y)}else if(2===e.length){var n=this.getPinchDistance(e[0],e[1]),o=n-this.lastPinchDistance;this.lastPinchDistance=n,this.orbitCamera.distance-=o*this.distanceSensitivity*.1*(.1*this.orbitCamera.distance),this.calcMidPoint(e[0],e[1],i),this.pan(i),this.lastPinchMidPoint.copy(i)}};function SSAOEffect(e,t){pc.PostEffect.call(this,e),this.ssaoScript=t,this.needsDepthBuffer=!0;var i=[pc.shaderChunks.screenDepthPS,"","varying vec2 vUv0;","","//uniform sampler2D uColorBuffer;","uniform vec4 uResolution;","","uniform float uAspect;","","#define saturate(x) clamp(x,0.0,1.0)","","// Largely based on 'Dominant Light Shadowing'","// 'Lighting Technology of The Last of Us Part II' by Hawar Doghramachi, Naughty Dog, LLC","","const float kSSCTLog2LodRate = 3.0;","","highp float getWFromProjectionMatrix(const mat4 p, const vec3 v) {","    // this essentially returns (p * vec4(v, 1.0)).w, but we make some assumptions","    // this assumes a perspective projection","    return -v.z;","    // this assumes a perspective or ortho projection","    // return p[2][3] * v.z + p[3][3];","}","","highp float getViewSpaceZFromW(const mat4 p, const float w) {","    // this assumes a perspective projection","    return -w;","    // this assumes a perspective or ortho projection","   // return (w - p[3][3]) / p[2][3];","}","","","const float kLog2LodRate = 3.0;","","vec2 sq(const vec2 a) {","    return a * a;","}","","uniform float uInvFarPlane;","","vec2 pack(highp float depth) {","// we need 16-bits of precision","    highp float z = clamp(depth * uInvFarPlane, 0.0, 1.0);","    highp float t = floor(256.0 * z);","    mediump float hi = t * (1.0 / 256.0);   // we only need 8-bits of precision","    mediump float lo = (256.0 * z) - t;     // we only need 8-bits of precision","    return vec2(hi, lo);","}","","// random number between 0 and 1, using interleaved gradient noise","float random(const highp vec2 w) {","    const vec3 m = vec3(0.06711056, 0.00583715, 52.9829189);","    return fract(m.z * fract(dot(w, m.xy)));","}","","// returns the frag coord in the GL convention with (0, 0) at the bottom-left","highp vec2 getFragCoord() {","    return gl_FragCoord.xy;","}","","highp vec3 computeViewSpacePositionFromDepth(highp vec2 uv, highp float linearDepth) {","    return vec3((0.5 - uv) * vec2(uAspect, 1.0) * linearDepth, linearDepth);","}","","highp vec3 faceNormal(highp vec3 dpdx, highp vec3 dpdy) {","    return normalize(cross(dpdx, dpdy));","}","","// Compute normals using derivatives, which essentially results in half-resolution normals","// this creates arifacts around geometry edges.","// Note: when using the spirv optimizer, this results in much slower execution time because","//       this whole expression is inlined in the AO loop below.","highp vec3 computeViewSpaceNormal(const highp vec3 position) {","    return faceNormal(dFdx(position), dFdy(position));","}","","// Compute normals directly from the depth texture, resulting in full resolution normals","// Note: This is actually as cheap as using derivatives because the texture fetches","//       are essentially equivalent to textureGather (which we don't have on ES3.0),","//       and this is executed just once.","highp vec3 computeViewSpaceNormal(const highp vec3 position, const highp vec2 uv) {","    highp vec2 uvdx = uv + vec2(uResolution.z, 0.0);","    highp vec2 uvdy = uv + vec2(0.0, uResolution.w);","    highp vec3 px = computeViewSpacePositionFromDepth(uvdx, -getLinearScreenDepth(uvdx));","    highp vec3 py = computeViewSpacePositionFromDepth(uvdy, -getLinearScreenDepth(uvdy));","    highp vec3 dpdx = px - position;","    highp vec3 dpdy = py - position;","    return faceNormal(dpdx, dpdy);","}","","// Ambient Occlusion, largely inspired from:","// 'The Alchemy Screen-Space Ambient Obscurance Algorithm' by Morgan McGuire","// 'Scalable Ambient Obscurance' by Morgan McGuire, Michael Mara and David Luebke","","uniform vec2 uSampleCount;","uniform float uSpiralTurns;","","#define PI (3.14159)","","vec3 tapLocation(float i, const float noise) {","    float offset = ((2.0 * PI) * 2.4) * noise;","    float angle = ((i * uSampleCount.y) * uSpiralTurns) * (2.0 * PI) + offset;","    float radius = (i + noise + 0.5) * uSampleCount.y;","    return vec3(cos(angle), sin(angle), radius * radius);","}","","highp vec2 startPosition(const float noise) {","    float angle = ((2.0 * PI) * 2.4) * noise;","    return vec2(cos(angle), sin(angle));","}","","uniform vec2 uAngleIncCosSin;","","highp mat2 tapAngleStep() {","    highp vec2 t = uAngleIncCosSin;","    return mat2(t.x, t.y, -t.y, t.x);","}","","vec3 tapLocationFast(float i, vec2 p, const float noise) {","    float radius = (i + noise + 0.5) * uSampleCount.y;","    return vec3(p, radius * radius);","}","","uniform float uMaxLevel;","uniform float uInvRadiusSquared;","uniform float uMinHorizonAngleSineSquared;","uniform float uBias;","uniform float uPeak2;","","void computeAmbientOcclusionSAO(inout float occlusion, float i, float ssDiskRadius,","        const highp vec2 uv,  const highp vec3 origin, const vec3 normal,","        const vec2 tapPosition, const float noise) {","","    vec3 tap = tapLocationFast(i, tapPosition, noise);","","    float ssRadius = max(1.0, tap.z * ssDiskRadius);","","    vec2 uvSamplePos = uv + vec2(ssRadius * tap.xy) * uResolution.zw;","","    float level = clamp(floor(log2(ssRadius)) - kLog2LodRate, 0.0, float(uMaxLevel));","    highp float occlusionDepth = -getLinearScreenDepth(uvSamplePos);","    highp vec3 p = computeViewSpacePositionFromDepth(uvSamplePos, occlusionDepth);","","    // now we have the sample, compute AO","    vec3 v = p - origin;        // sample vector","    float vv = dot(v, v);       // squared distance","    float vn = dot(v, normal);  // distance * cos(v, normal)","","    // discard samples that are outside of the radius, preventing distant geometry to","    // cast shadows -- there are many functions that work and choosing one is an artistic","    // decision.","    float w = max(0.0, 1.0 - vv * uInvRadiusSquared);","    w = w*w;","","    // discard samples that are too close to the horizon to reduce shadows cast by geometry","    // not sufficiently tessellated. The goal is to discard samples that form an angle 'beta'","    // smaller than 'epsilon' with the horizon. We already have dot(v,n) which is equal to the","    // sin(beta) * |v|. So the test simplifies to vn^2 < vv * sin(epsilon)^2.","    w *= step(vv * uMinHorizonAngleSineSquared, vn * vn);","","    occlusion += w * max(0.0, vn + origin.z * uBias) / (vv + uPeak2);","}","","uniform float uProjectionScaleRadius;","uniform float uIntensity;","","float scalableAmbientObscurance(highp vec2 uv, highp vec3 origin, vec3 normal) {","    float noise = random(getFragCoord());","    highp vec2 tapPosition = startPosition(noise);","    highp mat2 angleStep = tapAngleStep();","","    // Choose the screen-space sample radius","    // proportional to the projected area of the sphere","    float ssDiskRadius = -(uProjectionScaleRadius / origin.z);","","    float occlusion = 0.0;",e.webgl2?"    for (float i = 0.0; i < uSampleCount.x; i += 1.0) {":"   const float maxSampleCount = 256.0;   for (float i = 0.0; i < maxSampleCount; i += 1.0) {       if (i >= uSampleCount.x) break;","        computeAmbientOcclusionSAO(occlusion, i, ssDiskRadius, uv, origin, normal, tapPosition, noise);","        tapPosition = angleStep * tapPosition;","    }","    return sqrt(occlusion * uIntensity);","}","","uniform float uPower;","","void main() {","    highp vec2 uv = vUv0; //variable_vertex.xy; // interpolated to pixel center","","    highp float depth = -getLinearScreenDepth(vUv0);","    highp vec3 origin = computeViewSpacePositionFromDepth(uv, depth);","    vec3 normal = computeViewSpaceNormal(origin, uv);","","    float occlusion = 0.0;","","    if (uIntensity > 0.0) {","        occlusion = scalableAmbientObscurance(uv, origin, normal);","    }","","    // occlusion to visibility","    float aoVisibility = pow(saturate(1.0 - occlusion), uPower);","","    vec4 inCol = vec4(1.0, 1.0, 1.0, 1.0); //texture2D( uColorBuffer,  uv );","","    gl_FragColor.r = aoVisibility; //postProcess.color.rgb = vec3(aoVisibility, pack(origin.z));","}","","void main_old()","{","    vec2 aspectCorrect = vec2( 1.0, uAspect );","","    float depth = getLinearScreenDepth(vUv0);","    gl_FragColor.r = fract(floor(depth*256.0*256.0)),fract(floor(depth*256.0)),fract(depth);","}"].join("\n"),o=[pc.shaderChunks.screenDepthPS,"","varying vec2 vUv0;","","uniform sampler2D uSSAOBuffer;","uniform vec4 uResolution;","","uniform float uAspect;","","uniform int uBilatSampleCount;","uniform float uFarPlaneOverEdgeDistance;","uniform float uBrightness;","","float random(const highp vec2 w) {","    const vec3 m = vec3(0.06711056, 0.00583715, 52.9829189);","    return fract(m.z * fract(dot(w, m.xy)));","}","","float bilateralWeight(in float depth, in float sampleDepth) {","    float diff = (sampleDepth - depth) * uFarPlaneOverEdgeDistance;","    return max(0.0, 1.0 - diff * diff);","}","","void tap(inout float sum, inout float totalWeight, float weight, float depth, vec2 position) {","    // ambient occlusion sample","    float ssao = texture2D( uSSAOBuffer, position ).r;","    float tdepth = -getLinearScreenDepth( position );","","    // bilateral sample","    float bilateral = bilateralWeight(depth, tdepth);","    bilateral *= weight;","    sum += ssao * bilateral;","    totalWeight += bilateral;","}","","void main() {","    highp vec2 uv = vUv0; // variable_vertex.xy; // interpolated at pixel's center","","    // we handle the center pixel separately because it doesn't participate in bilateral filtering","    float depth = -getLinearScreenDepth(vUv0); // unpack(data.gb);","    float totalWeight = 0.0; // float(uBilatSampleCount*2+1)*float(uBilatSampleCount*2+1);","    float ssao = texture2D( uSSAOBuffer, vUv0 ).r;","    float sum = ssao * totalWeight;","",e.webgl2?"    for (int x = -uBilatSampleCount; x <= uBilatSampleCount; x++) {       for (int y = -uBilatSampleCount; y < uBilatSampleCount; y++) {":"    for (int x = -4; x <= 4; x++) {       for (int y = -4; y < 4; y++) {","           float weight = 1.0;","           vec2 offset = vec2(x,y)*uResolution.zw;","           tap(sum, totalWeight, weight, depth, uv + offset);","       }","    }","","    float ao = sum / totalWeight;","","    // simple dithering helps a lot (assumes 8 bits target)","    // this is most useful with high quality/large blurs","    // ao += ((random(gl_FragCoord.xy) - 0.5) / 255.0);","","    ao = mix(ao, 1.0, uBrightness);","    gl_FragColor.a = ao;","}"].join("\n"),a=["varying vec2 vUv0;","uniform sampler2D uColorBuffer;","uniform sampler2D uSSAOBuffer;","","void main(void)","{","    vec4 inCol = texture2D( uColorBuffer, vUv0 );","    float ssao = texture2D( uSSAOBuffer, vUv0 ).a;","    gl_FragColor.rgb = inCol.rgb * ssao;","    gl_FragColor.a = inCol.a;","}"].join("\n"),s={aPosition:pc.SEMANTIC_POSITION};this.ssaoShader=pc.createShaderFromCode(e,pc.PostEffect.quadVertexShader,i,"SsaoShader",s),this.blurShader=pc.createShaderFromCode(e,pc.PostEffect.quadVertexShader,o,"SsaoBlurShader",s),this.outputShader=pc.createShaderFromCode(e,pc.PostEffect.quadVertexShader,a,"SsaoOutputShader",s),this.radius=4,this.brightness=0,this.samples=20,this.downscale=1}SSAOEffect.prototype=Object.create(pc.PostEffect.prototype),SSAOEffect.prototype.constructor=SSAOEffect,SSAOEffect.prototype._destroy=function(){this.target&&(this.target.destroyTextureBuffers(),this.target.destroy(),this.target=null),this.blurTarget&&(this.blurTarget.destroyTextureBuffers(),this.blurTarget.destroy(),this.blurTarget=null)},SSAOEffect.prototype._resize=function(e){var t=Math.ceil(e.colorBuffer.width/this.downscale),i=Math.ceil(e.colorBuffer.height/this.downscale);if(t!==this.width||i!==this.height){this.width=t,this.height=i,this._destroy();var o=new pc.Texture(this.device,{format:pc.PIXELFORMAT_RGBA8,minFilter:pc.FILTER_LINEAR,magFilter:pc.FILTER_LINEAR,addressU:pc.ADDRESS_CLAMP_TO_EDGE,addressV:pc.ADDRESS_CLAMP_TO_EDGE,width:this.width,height:this.height,mipmaps:!1});o.name="SSAO Result",this.target=new pc.RenderTarget({name:"SSAO Result Render Target",colorBuffer:o,depth:!1});var a=new pc.Texture(this.device,{format:pc.PIXELFORMAT_RGBA8,minFilter:pc.FILTER_LINEAR,magFilter:pc.FILTER_LINEAR,addressU:pc.ADDRESS_CLAMP_TO_EDGE,addressV:pc.ADDRESS_CLAMP_TO_EDGE,width:this.width,height:this.height,mipmaps:!1});a.name="SSAO Blur",this.blurTarget=new pc.RenderTarget({name:"SSAO Blur Render Target",colorBuffer:a,depth:!1})}},Object.assign(SSAOEffect.prototype,{render:function(e,t,i){this._resize(e);var o=this.device,a=o.scope,s=this.samples,r=1/(s-.5)*10*2*3.141,n=this.radius,l=.1*n,u=2*l*3.141*.125,c=.5*o.height,h=this.ssaoScript.entity.camera.farClip;a.resolve("uAspect").setValue(this.width/this.height),a.resolve("uResolution").setValue([this.width,this.height,1/this.width,1/this.height]),a.resolve("uBrightness").setValue(this.brightness),a.resolve("uInvFarPlane").setValue(1/h),a.resolve("uSampleCount").setValue([s,1/s]),a.resolve("uSpiralTurns").setValue(10),a.resolve("uAngleIncCosSin").setValue([Math.cos(r),Math.sin(r)]),a.resolve("uMaxLevel").setValue(0),a.resolve("uInvRadiusSquared").setValue(1/(n*n)),a.resolve("uMinHorizonAngleSineSquared").setValue(0),a.resolve("uBias").setValue(.001),a.resolve("uPeak2").setValue(l*l),a.resolve("uIntensity").setValue(u),a.resolve("uPower").setValue(1),a.resolve("uProjectionScaleRadius").setValue(c*n),this.drawQuad(this.target,this.ssaoShader,i),a.resolve("uSSAOBuffer").setValue(this.target.colorBuffer),a.resolve("uFarPlaneOverEdgeDistance").setValue(1),a.resolve("uBilatSampleCount").setValue(4),this.drawQuad(this.blurTarget,this.blurShader,i),a.resolve("uSSAOBuffer").setValue(this.blurTarget.colorBuffer),a.resolve("uColorBuffer").setValue(e.colorBuffer),this.drawQuad(t,this.outputShader,i)}});var SSAO=pc.createScript("ssao");SSAO.attributes.add("radius",{type:"number",default:4,min:0,max:20,title:"Radius"}),SSAO.attributes.add("brightness",{type:"number",default:0,min:0,max:1,title:"Brightness"}),SSAO.attributes.add("samples",{type:"number",default:16,min:1,max:256,title:"Samples"}),SSAO.attributes.add("downscale",{type:"number",default:1,min:1,max:4,title:"Downscale"}),SSAO.prototype.initialize=function(){this.effect=new SSAOEffect(this.app.graphicsDevice,this),this.effect.radius=this.radius,this.effect.brightness=this.brightness,this.effect.samples=this.samples,this.effect.downscale=this.downscale,this.on("attr",(function(e,t){this.effect[e]=t}),this);var e=this.entity.camera.postEffects;e.addEffect(this.effect),this.on("state",(function(t){t?e.addEffect(this.effect):e.removeEffect(this.effect)})),this.on("destroy",(function(){e.removeEffect(this.effect),this.effect._destroy()}))};const Profiler=pc.createScript("Profiler");Profiler.attributes.add("time",{type:"number",default:12,title:"Time to profiler the application"}),Profiler.attributes.add("browser",{type:"string",default:"chrome",title:"Name of the Browser"}),Profiler.attributes.add("scene",{type:"string",default:"pirate",title:"Name of the scene"}),window.BROWSER_NAME="chrome",window.PC_SCENE_NAME="floresta_ssao",Profiler.prototype.initialize=()=>{setTimeout((()=>{this.profiler=new ProfilerHelper,setTimeout((()=>{const t=this.profiler.computerAllStats();postJson({library:"pc-editor",browser:window.BROWSER_NAME,scene:window.PC_SCENE_NAME,performanceData:t})}),15e3)}),15e3)},Profiler.prototype.update=t=>{this.profiler?.update()};class ProfilerHelper{delta;deltaList;startTime;timestamp;elapsedGoal;deltaMin;deltaMax;deltaMinList;deltaMaxList;handleHighFps;constructor(){this.delta=0,this.deltaList=[],this.deltaMinList=[],this.deltaMaxList=[],this.elapsedGoal=1e3/60,this.startTime=performance.now(),this.timestamp=this.startTime,this.deltaMin=1/0,this.deltaMax=0,this.hasIdleCallbackCalledFrame=!1,this.handleHighFps=!0,this.intervalID=setInterval((()=>{this.addDeltaMinMaxMean()}),1e3)}destroy(){clearInterval(this.intervalID)}addDeltaMinMaxMean(){this.deltaMinList.push(this.deltaMin),this.deltaMaxList.push(this.deltaMax),this.deltaMin=1/0,this.deltaMax=0}getFps(){return{fps:1e3/this.delta,fpsMax:1e3/this.deltaMin,fpsMin:1e3/this.deltaMax}}#t(t){t>this.deltaMax?this.deltaMax=t:t<this.deltaMin&&(this.deltaMin=t),this.deltaList.push(t)}idleCallbackUpdate(t){this.delta=this.elapsedGoal-t.timeRemaining(),this.hasIdleCallbackCalledFrame=!0,this.#t(this.delta)}update(){const t=performance.now()-this.timestamp;this.timestamp=performance.now(),this.handleHighFps?(this.hasIdleCallbackCalledFrame||(this.delta=t,this.#t(t)),this.hasIdleCallbackCalledFrame=!1,requestIdleCallback(ProfilerHelper.prototype.idleCallbackUpdate.bind(this))):(this.delta=t,this.#t(t))}computerAllStats(){this.deltaList.sort().reverse();const t=performance.now()-this.startTime,e=1e3/mean(this.deltaList),a=1e3/mean(this.deltaMinList),i=1e3/mean(this.deltaMaxList);return{profilingTime:t,totalFrames:this.deltaList.length,fpsAVG:e,fpsTruncatedAVG:1e3/truncatedMean(this.deltaList,80),fps1Low:(()=>{const t=.01*this.deltaList.length;let e=0;for(let a=0;a<t;++a)e+=this.deltaList[a];return 1e3/(e/t)})(),fpsMaxAVG:a,fpsMinAVG:i}}}function mean(t){return t.reduce(((t,e)=>t+e))/t.length}function truncatedMean(t,e){const a=Math.floor(t.length*((100-e)/200)),i=t.length-a,s=i-a;let l=0;for(let e=a;e<i;++e)l+=t[e];return l/s}async function postJson(t){const e=JSON.stringify(t,void 0,4);console.log(e);try{const t=await fetch("http://localhost:8000/",{method:"POST",body:e,headers:{"Content-Type":"application/json;charset=utf-8"}});if(!t.ok)throw new Error(t.statusText);const a=await t.text();return console.log(a),{success:!0,text:a}}catch(t){return console.error(t),{success:!1}}}